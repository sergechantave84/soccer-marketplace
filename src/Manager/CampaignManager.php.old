<?php

namespace App\Manager;

use App\Entity\Campaign;
use App\Entity\SiteEngine;
use App\Entity\SRKeywords;
use App\Enum\CampaignStateType;
use App\Enum\SRKeywordStateType;
use App\Service\ConnectApi;
use Doctrine\ORM\EntityManagerInterface;
use GuzzleHttp\Exception\GuzzleException;
use Psr\Http\Message\ResponseInterface;
use Psr\Log\LoggerInterface;
use Ramsey\Uuid\Rfc4122\UuidV4;
use stdClass;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\Response;
use \Exception;

class CampaignManager
{
    private ConnectApi $connectApi;
    private ContainerInterface $container;
    private LoggerInterface $logger;
    private EntityManagerInterface $entityManager;

    public function __construct(
        ConnectApi $connectApi,
        ContainerInterface $container,
        EntityManagerInterface $entityManager,
        LoggerInterface $logger
    ) {
        $this->connectApi = $connectApi;
        $this->container = $container;
        $this->entityManager = $entityManager;
        $this->logger = $logger;
    }

    /**
     * @throws GuzzleException
     * @throws Exception
     */
    public function populateCampaign()
    {
        //$urlCampaigns = $_ENV['AGENCYANALYTICS_API_REST_V3'] . 'campaigns';
        $url = $_ENV['AGENCYANALYTICS_API_REST_V4'];
        $jsonData = $this->setBodyAgencyAnalyticsREST(
            'agency-analytics-v2',
            'campaign',
            'read',
            $this->paramFieldsCampaign(),
            [],
            0,
            2
        );
        $authorizationBasic = $this->connectApi::basicAuthorization('', $_ENV['AGENCYANALYTICS_API_KEY']);
        /*return [
            'authorizationBasic' => $authorizationBasic,
            'jsonData' => $jsonData,
        ];*/
        $response = $this->connectApi->connectGuzzle(
            $url,
            'POST',
            '',
            $authorizationBasic,
            $jsonData,
            []
        );
        $data = $this->isRespValid($response);
        //dump($data);die;
        $counter = 0;
        $counterNew = 0;
        if ($data->respValid) {
            foreach ($data->rows as $campaignJson) {
                $counter++;
                $campaign = $this->saveCampaign($campaignJson);
                if ($campaign) {
                    /**
                     * TODO
                     * $seranking = new SeRanking();
                    $seranking->setCampaign($campaign);
                    $this->entityManager->persist($seranking);
                    $this->entityManager->flush();

                    $siteEngine = new SiteEngine();
                    $siteEngine->setSeranking($seranking);
                    $this->entityManager->persist($siteEngine);
                    $this->entityManager->flush();
                     */

                    $counterNew++;
                    //$urlKeywords = $_ENV['AGENCYANALYTICS_API_REST_V3'] . 'keywords?campaign_id=' . $campaignJson->id;
                    $jsonData = $this->setBodyAgencyAnalyticsREST(
                        'agency-analytics-v2',
                        'keyword',
                        'read',
                        $this->paramFieldsKeyword(),
                        [
                            [
                                'campaign_id' => [
                                    '$equals_comparison' => $campaignJson->id,
                                ],
                            ],
                        ],
                        0,
                        100
                    );
                    $keywordsResp = $this->connectApi->connectGuzzle(
                        $url,
                        'POST',
                        '',
                        $authorizationBasic,
                        $jsonData,
                        []
                    );
                    $data = $this->isRespValid($keywordsResp);
                    if ($data->respValid) {
                        foreach ($data->rows as $keyword) {
                            $this->saveKeywords($campaign, $keyword, null);
                        }
                    }
                }
                dump($campaign);
                die;
            }
        }
        die;
        $msg = $counterNew . ' nouvelles campaignes / ' . $counter . ' récupérées depuis agencyanalytics';
        $this->logger->debug($msg);

        return $msg;
    }

    public function isRespValid($resp): stdClass
    {
        $data = new stdClass();
        $data->rows = [];
        $data->respValid = false;
        if ($resp instanceof ResponseInterface) {
            if ($resp->getStatusCode() === Response::HTTP_OK) {
                $content = json_decode($resp->getBody()->getContents());
                if (property_exists($content, 'metadata')) {
                    if ($content->metadata->total_records >= 1) {
                        $data->rows = $content->data;
                        $data->respValid = true;
                    }
                } else if (property_exists($content, 'results')) {
                    if (property_exists($content->results, 'metadata')) {
                        if ($content->results->metadata->total_records >= 1) {
                            $data->rows = $content->results->rows;
                            $data->respValid = true;
                        }
                    }
                }
            }
        }

        return $data;
    }

    public function setBodyAgencyAnalyticsREST(
        string $provider,
        string $asset,
        string $operation,
        array $fields,
        array $filters = [],
        int $offset = 0,
        int $limit = 100
    ): array {
        $paramBody = [
            'provider'  => $provider,
            'asset'     => $asset,
            'operation' => $operation,
            'fields'    => $fields,
            'sort'      => [
                [
                    "id" => 'asc',
                ],
            ],
            'offset'    => $offset,
            'limit'     => $limit,
        ];
        if ($filters !== []) {
            $paramBody['filters'] = $filters;
        }

        return $paramBody;
    }

    /**
     * @return string[]
     */
    public function paramFieldsCampaign(): array
    {
        return [
            "id",
            "date_created",
            "date_modified",
            "url",
            "company",
            "scope",
            "account_id",
            "campaign_group_id",
        ];
    }

    /**
     * @return string[]
     */
    public function paramFieldsKeyword(): array
    {
        return [
            "id" ,
            "date_created",
            "date_modified",
            "keyword_phrase",
            "primary_keyword",
            "campaign_id",
            "search_location",
            "search_language",
        ];
    }

    /**
     * @param stdClass $campaignJSON
     * @return Campaign|null
     * @throws Exception
     */
    public function saveCampaign(stdClass $campaignJSON): ?Campaign
    {
        $campaign =  $this->entityManager->getRepository(Campaign::class)->findOneBy(['agencyanalyticsId' => $campaignJSON->id]);
        if (!$campaign) {
            $campaign = new Campaign();
            $campaign->setUid(UuidV4::uuid4());
            $campaign->setStartDate(new \DateTime($campaignJSON->date_created));
            $campaign->setTitle($campaignJSON->company);
            $campaign->setWebsiteUri($campaignJSON->url);
            $campaign->setState(CampaignStateType::MIGRATED);
            // TODO $campaign->setGAType($campaignJSON->type); // $campaignJSON->type does not exist in agencyanalytics v2
            $campaign->setAgencyanalyticsId($campaignJSON->id);

            /*$this->entityManager->persist($campaign);
            $this->entityManager->flush();*/

            return $campaign;
        }

        return null;
    }

    /**
     * @param Campaign $campaign
     * @param stdClass $keyword
     * @param SiteEngine|null $siteEngine
     * @return SRKeywords
     */
    public function saveKeywords(Campaign $campaign, stdClass $keyword, ?SiteEngine $siteEngine): SRKeywords
    {
        $keywords = new SRKeywords();
        $keywords->setCampaignUid($campaign->getUid());
        $keywords->setName($keyword->keyword_phrase);
        $keywords->setState(
            $keyword->primary_keyword === 'true'
                ?
                SRKeywordStateType::TRACKED
                :
                SRKeywordStateType::UNTRACKED
        );
        /**
         * @TODO
         * $keywords->setSiteEngine($siteEngine);
         *
         */

        /*$this->entityManager->persist($keywords);
        $this->entityManager->flush();*/

        dump($keywords);

        return $keywords;
    }
}
