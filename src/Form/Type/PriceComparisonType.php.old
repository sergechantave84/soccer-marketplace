<?php

namespace App\Form\Type;

use App\Entity\Product;
use App\Entity\Constants\ProductState;
use App\Entity\ProductUser;
use App\Entity\User;
use App\Repository\ProductRepository;
use App\Repository\ProductUserRepository;
use Doctrine\DBAL\Types\FloatType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
use Symfony\Component\Validator\Constraints\NotNull;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Translation\TranslatorInterface;

/**
 * Class PriceComparison
 * @package App\Form\Type
 */
class PriceComparisonType extends AbstractType
{
    /**
     * @var TranslatorInterface
     */
    private $translator;

    /**
     * @var User
     */
    private $currentSeller;

    /**
     * PriceComparisonType constructor.
     * @param TranslatorInterface   $translator
     * @param TokenStorageInterface $tokenStorage
     */
    public function __construct(TranslatorInterface $translator, TokenStorageInterface $tokenStorage)
    {
        $this->translator    = $translator;
        $this->currentSeller = $tokenStorage->getToken()->getUser();
    }

    /**
     * {@inheritdoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add(
                'product',
                EntityType::class,
                [
                    'class'         => Product::class,
                    'label'         => $this->translator
                        ->trans('price_comparison.product', [], 'label'),
                    'choice_label'  => function ($product) {
                        return $product->getLabel() . ' ' . $this->translator
                                ->trans($product->getTranslationLabel(), [], 'label');
                    },
                    'expanded'      => false,
                    'multiple'      => false,
                    'required'      => true,
                    'attr' => [
                        "class" => "form-control",
                    ],
                    'query_builder' => function (ProductRepository $productRepository) {
                        return $productRepository->getProductBySeller($this->currentSeller);
                    },
                ]
            )
            ->add(
                'state',
                ChoiceType::class,
                [
                    'required'  => true,
                    'label'     => $this->translator
                        ->trans('price_comparison.state', [], 'label'),
                    'choices'   => ProductState::$formChoices,
                    'expanded'  => false,
                    'multiple'  => false,
                    'attr' => [
                        "class" => "form-control",
                    ],
                ]
            )
            ->add(
                'price',
                NumberType::class,
                [
                    //'required'  => false,
                    'label'     => $this->labelMinPrice(),
                    'attr'      => [
                        "class" => "form-control",
                        "placeholder" => $this->labelMinPrice(),
                    ],
                ]
            );
    }

    /**
     * {@inheritdoc}
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(
            array(
                'translation_domain' => 'label',
            )
        );
    }

    /**
     * {@inheritdoc}
     */
    public function getBlockPrefix()
    {
        return '';
    }

    /**
     * @return string
     */
    private function labelMinPrice()
    {
        return $this->translator
            ->trans('price_comparison.min_price', [], 'label');
    }
}
